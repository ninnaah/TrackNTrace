/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Juna.SKS.Package.Services.Attributes;

using Microsoft.AspNetCore.Authorization;
using Juna.SKS.Package.Services.DTOs.Models;
using Juna.SKS.Package.BusinessLogic.Interfaces;
using Juna.SKS.Package.BusinessLogic;
using AutoMapper;
using Juna.SKS.Package.Services.AutoMapper;
using System.Diagnostics;
using Microsoft.Extensions.DependencyInjection;
using Juna.SKS.Package.DataAccess.Sql;
using Microsoft.Extensions.Logging;
using Juna.SKS.Package.BusinessLogic.Interfaces.Exceptions;

namespace Juna.SKS.Package.Services.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LogisticsPartnerApiController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly ILogisticsPartnerLogic _logisticsPartnerLogic;
        private readonly ILogger<LogisticsPartnerApiController> _logger;

        public LogisticsPartnerApiController(ILogisticsPartnerLogic logisticsPartnerLogic, IMapper mapper, ILogger<LogisticsPartnerApiController> logger)
        {
            this._logisticsPartnerLogic = logisticsPartnerLogic;
            this._mapper = mapper;
            _logger = logger;
        }

        /// <summary>
        /// Transfer an existing parcel into the system from the service of a logistics partner. 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <response code="200">Successfully transitioned the parcel</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}")]
        [ValidateModelState]
        [SwaggerOperation("TransitionParcel")]
        [SwaggerResponse(statusCode: 200, type: typeof(NewParcelInfo), description: "Successfully transitioned the parcel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult TransitionParcel([FromBody]Parcel body, [FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")]string trackingId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NewParcelInfo));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            try
            {
                BusinessLogic.Entities.Parcel BLparcel = this._mapper.Map<BusinessLogic.Entities.Parcel>(body);
                var response = this._logisticsPartnerLogic.TransitionParcel(BLparcel, trackingId);

                NewParcelInfo info = new NewParcelInfo();
                info.TrackingId = response;
                _logger.LogInformation("Respond 200 - Transitioned parcel");
                return StatusCode(200, info);
            }
            catch (ValidatorException ex)
            {
                _logger.LogError("Respond 400 - Parcel is invalid", ex);
                return StatusCode(400, new Error($"Parcel is invalid - {ex.Message}")); 
            }
            catch (LogicException ex)
            {
                _logger.LogError(ex.Message, ex);
                return StatusCode(400, new Error(ex.Message));
            }/*catch(Exception ex)
            {
                string errorMessage = $"An unknown error occurred transitioning a parcel with trackingid {trackingId}";
                _logger.LogError(errorMessage, ex);
                return StatusCode(400, new Error(ex.Message));
            }*/
            

        }
    }
}
