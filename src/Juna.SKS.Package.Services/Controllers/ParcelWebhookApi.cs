/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

using Microsoft.AspNetCore.Authorization;
using Juna.SKS.Package.Services.Attributes;
using Juna.SKS.Package.Services.DTOs.Models;
using AutoMapper;
using Microsoft.Extensions.Logging;
using Juna.SKS.Package.BusinessLogic.Interfaces;
using Juna.SKS.Package.BusinessLogic.Interfaces.Exceptions;

namespace Juna.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ParcelWebhookApiController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly IParcelWebhookLogic _webhookLogic;
        private readonly ILogger<ParcelWebhookApiController> _logger;

        public ParcelWebhookApiController(IParcelWebhookLogic webhookLogic, IMapper mapper, ILogger<ParcelWebhookApiController> logger)
        {
            this._webhookLogic = webhookLogic;
            this._mapper = mapper;
            _logger = logger;
        }

        /// <summary>
        /// Get all registered subscriptions for the parcel webhook.
        /// </summary>
        /// <param name="trackingId"></param>
        /// <response code="200">List of webooks for the &#x60;trackingId&#x60;</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpGet]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("ListParcelWebhooks")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponses), description: "List of webooks for the &#x60;trackingId&#x60;")]
        public virtual IActionResult ListParcelWebhooks([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WebhookResponses));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            try
            {
                var DAwebhooks = this._webhookLogic.ListParcelWebhooks(trackingId);

                WebhookResponses webhooks = this._mapper.Map<Services.DTOs.Models.WebhookResponses>(DAwebhooks); 

                _logger.LogInformation("Respond 200 - List parcel webhooks");
                return StatusCode(200, webhooks);
            }
            catch (LogicDataNotFoundException ex)
            {
                _logger.LogError("Respond 404 - Parcel not found", ex);
                return StatusCode(404);
            }

        }

        /// <summary>
        /// Subscribe to a webhook notification for the specific parcel.
        /// </summary>
        /// <param name="trackingId"></param>
        /// <param name="url"></param>
        /// <response code="200">Successful response</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("SubscribeParcelWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(WebhookResponse), description: "Successful response")]
        public virtual IActionResult SubscribeParcelWebhook([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId, [FromQuery][Required()] string url)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WebhookResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            try
            {
                var DAwebhook = this._webhookLogic.SubscribeParcelWebhook(trackingId, url);

                WebhookResponse webhook = this._mapper.Map<Services.DTOs.Models.WebhookResponse>(DAwebhook);

                _logger.LogInformation("Respond 200 - Subscribe parcel webhooks");
                return StatusCode(200, webhook);
            }
            catch (LogicDataNotFoundException ex)
            {
                _logger.LogError("Respond 404 - Parcel not found", ex);
                return StatusCode(404);
            }

        }

        /// <summary>
        /// Remove an existing webhook subscription.
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Subscription does not exist.</response>
        [HttpDelete]
        [Route("/parcel/webhooks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UnsubscribeParcelWebhook")]
        public virtual IActionResult UnsubscribeParcelWebhook([FromRoute][Required] long? id)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            try
            {
                this._webhookLogic.UnsubscribeParcelWebhook(id);

                _logger.LogInformation("Respond 200 - Unsubscribe parcel webhooks");
                return StatusCode(200);
            }
            catch (LogicDataNotFoundException ex)
            {
                _logger.LogError("Respond 404 - Subscription not found", ex);
                return StatusCode(404);
            }
        }
    }
}
