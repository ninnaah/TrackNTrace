/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Juna.SKS.Package.Services.Attributes;

using Microsoft.AspNetCore.Authorization;
using Juna.SKS.Package.Services.DTOs.Models;
using Juna.SKS.Package.BusinessLogic.Interfaces;
using Juna.SKS.Package.BusinessLogic;
using AutoMapper;
using Juna.SKS.Package.Services.AutoMapper;
using Microsoft.Extensions.DependencyInjection;
using Juna.SKS.Package.DataAccess.Sql;
using Microsoft.Extensions.Logging;
using Juna.SKS.Package.BusinessLogic.Interfaces.Exceptions;

namespace Juna.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SenderApiController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly ISenderLogic _senderLogic;
        private readonly ILogger<SenderApiController> _logger;

        public SenderApiController(ISenderLogic senderLogic, IMapper mapper, ILogger<SenderApiController> logger)
        {
            this._senderLogic = senderLogic;
            this._mapper = mapper;
            _logger = logger;
        }

        /// <summary>
        /// Submit a new parcel to the logistics service. 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Successfully submitted the new parcel</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/parcel")]
        [ValidateModelState]
        [SwaggerOperation("SubmitParcel")]
        [SwaggerResponse(statusCode: 201, type: typeof(NewParcelInfo), description: "Successfully submitted the new parcel")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult SubmitParcel([FromBody] Parcel body)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(NewParcelInfo));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            try
            {
                BusinessLogic.Entities.Parcel BLparcel = this._mapper.Map<BusinessLogic.Entities.Parcel>(body);
                var response = this._senderLogic.SubmitParcel(BLparcel);

                NewParcelInfo info = new NewParcelInfo();
                info.TrackingId = response;

                _logger.LogInformation("Respond 201 - Submitted parcel");
                return StatusCode(201, info);
            }
            catch (ValidatorException ex)
            {
                _logger.LogError("Respond 400 - Parcel is invalid", ex);
                return StatusCode(400, new Error($"Parcel is invalid - {ex.Message}")); ;
            }
            catch (LogicDataNotFoundException ex)
            {
                _logger.LogError("Respond 400 - Data not found", ex);
                return StatusCode(400, new Error($"Data not found - {ex.Message}"));
            }
            catch (LogicException ex)
            {
                _logger.LogError(ex.Message, ex);
                return StatusCode(400, new Error(ex.Message));
            }
        }
    }
}
