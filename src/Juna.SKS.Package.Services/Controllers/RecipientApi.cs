/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Juna.SKS.Package.Services.Attributes;

using Microsoft.AspNetCore.Authorization;
using Juna.SKS.Package.Services.DTOs.Models;
using Juna.SKS.Package.BusinessLogic.Interfaces;
using Juna.SKS.Package.BusinessLogic;
using AutoMapper;
using Juna.SKS.Package.Services.AutoMapper;
using Microsoft.Extensions.DependencyInjection;
using Juna.SKS.Package.DataAccess.Sql;
using Microsoft.Extensions.Logging;

namespace Juna.SKS.Package.Services.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RecipientApiController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly IRecipientLogic _recipientLogic;
        private readonly ILogger<RecipientApiController> _logger;

        public RecipientApiController(IRecipientLogic recipientLogic, IMapper mapper, ILogger<RecipientApiController> logger)
        {
            this._recipientLogic = recipientLogic;
            this._mapper = mapper;
            _logger = logger;
        }

        /// <summary>
        /// Find the latest state of a parcel by its tracking ID. 
        /// </summary>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <response code="200">Parcel exists, here&#x27;s the tracking information.</response>
        /// <response code="400">The operation failed due to an error.</response>
        /// <response code="404">Parcel does not exist with this tracking ID.</response>
        [HttpGet]
        [Route("/parcel/{trackingId}")]
        [ValidateModelState]
        [SwaggerOperation("TrackParcel")]
        [SwaggerResponse(statusCode: 200, type: typeof(TrackingInformation), description: "Parcel exists, here&#x27;s the tracking information.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult TrackParcel([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")]string trackingId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TrackingInformation));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            try
            {
                var response = this._recipientLogic.TrackParcel(trackingId);

                if (response == null)
                {
                    _logger.LogInformation("Respond 400 - Tracking id is invalid");
                    return StatusCode(400, new Error("Tracking id is invalid"));
                }

                BusinessLogic.Entities.Parcel BLparcel = response;
                DTOs.Models.TrackingInformation trackingInfo = this._mapper.Map<DTOs.Models.TrackingInformation>(BLparcel);

                _logger.LogInformation("Respond 200 - Tracked parcel");
                return StatusCode(200, trackingInfo);

            }catch(Exception)
            {
                _logger.LogInformation("Respond 404 - Parcel not found");
                return StatusCode(404);
            }
            


        }
    }
}
